// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensor.proto
// Protobuf C++ Version: 5.29.3

#ifndef sensor_2eproto_2epb_2eh
#define sensor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensor_2eproto;
namespace sensor {
class GestureRequest;
struct GestureRequestDefaultTypeInternal;
extern GestureRequestDefaultTypeInternal _GestureRequest_default_instance_;
class Value2DoubleRequest;
struct Value2DoubleRequestDefaultTypeInternal;
extern Value2DoubleRequestDefaultTypeInternal _Value2DoubleRequest_default_instance_;
class Value2Int32Request;
struct Value2Int32RequestDefaultTypeInternal;
extern Value2Int32RequestDefaultTypeInternal _Value2Int32Request_default_instance_;
class Value4Int32Request;
struct Value4Int32RequestDefaultTypeInternal;
extern Value4Int32RequestDefaultTypeInternal _Value4Int32Request_default_instance_;
}  // namespace sensor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sensor {

// ===================================================================


// -------------------------------------------------------------------

class Value4Int32Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor.Value4Int32Request) */ {
 public:
  inline Value4Int32Request() : Value4Int32Request(nullptr) {}
  ~Value4Int32Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Value4Int32Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Value4Int32Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Value4Int32Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline Value4Int32Request(const Value4Int32Request& from) : Value4Int32Request(nullptr, from) {}
  inline Value4Int32Request(Value4Int32Request&& from) noexcept
      : Value4Int32Request(nullptr, std::move(from)) {}
  inline Value4Int32Request& operator=(const Value4Int32Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value4Int32Request& operator=(Value4Int32Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value4Int32Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Value4Int32Request* internal_default_instance() {
    return reinterpret_cast<const Value4Int32Request*>(
        &_Value4Int32Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Value4Int32Request& a, Value4Int32Request& b) { a.Swap(&b); }
  inline void Swap(Value4Int32Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value4Int32Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value4Int32Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Value4Int32Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Value4Int32Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Value4Int32Request& from) { Value4Int32Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Value4Int32Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor.Value4Int32Request"; }

 protected:
  explicit Value4Int32Request(::google::protobuf::Arena* arena);
  Value4Int32Request(::google::protobuf::Arena* arena, const Value4Int32Request& from);
  Value4Int32Request(::google::protobuf::Arena* arena, Value4Int32Request&& from) noexcept
      : Value4Int32Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kOp1FieldNumber = 3,
    kOp2FieldNumber = 4,
    kOp3FieldNumber = 5,
    kOp4FieldNumber = 6,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string action_id = 2;
  void clear_action_id() ;
  const std::string& action_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_id(Arg_&& arg, Args_... args);
  std::string* mutable_action_id();
  PROTOBUF_NODISCARD std::string* release_action_id();
  void set_allocated_action_id(std::string* value);

  private:
  const std::string& _internal_action_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_id(
      const std::string& value);
  std::string* _internal_mutable_action_id();

  public:
  // int32 op_1 = 3;
  void clear_op_1() ;
  ::int32_t op_1() const;
  void set_op_1(::int32_t value);

  private:
  ::int32_t _internal_op_1() const;
  void _internal_set_op_1(::int32_t value);

  public:
  // int32 op_2 = 4;
  void clear_op_2() ;
  ::int32_t op_2() const;
  void set_op_2(::int32_t value);

  private:
  ::int32_t _internal_op_2() const;
  void _internal_set_op_2(::int32_t value);

  public:
  // int32 op_3 = 5;
  void clear_op_3() ;
  ::int32_t op_3() const;
  void set_op_3(::int32_t value);

  private:
  ::int32_t _internal_op_3() const;
  void _internal_set_op_3(::int32_t value);

  public:
  // int32 op_4 = 6;
  void clear_op_4() ;
  ::int32_t op_4() const;
  void set_op_4(::int32_t value);

  private:
  ::int32_t _internal_op_4() const;
  void _internal_set_op_4(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sensor.Value4Int32Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Value4Int32Request& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr action_id_;
    ::int32_t op_1_;
    ::int32_t op_2_;
    ::int32_t op_3_;
    ::int32_t op_4_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class Value2Int32Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor.Value2Int32Request) */ {
 public:
  inline Value2Int32Request() : Value2Int32Request(nullptr) {}
  ~Value2Int32Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Value2Int32Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Value2Int32Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Value2Int32Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline Value2Int32Request(const Value2Int32Request& from) : Value2Int32Request(nullptr, from) {}
  inline Value2Int32Request(Value2Int32Request&& from) noexcept
      : Value2Int32Request(nullptr, std::move(from)) {}
  inline Value2Int32Request& operator=(const Value2Int32Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value2Int32Request& operator=(Value2Int32Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value2Int32Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Value2Int32Request* internal_default_instance() {
    return reinterpret_cast<const Value2Int32Request*>(
        &_Value2Int32Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Value2Int32Request& a, Value2Int32Request& b) { a.Swap(&b); }
  inline void Swap(Value2Int32Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value2Int32Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value2Int32Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Value2Int32Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Value2Int32Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Value2Int32Request& from) { Value2Int32Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Value2Int32Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor.Value2Int32Request"; }

 protected:
  explicit Value2Int32Request(::google::protobuf::Arena* arena);
  Value2Int32Request(::google::protobuf::Arena* arena, const Value2Int32Request& from);
  Value2Int32Request(::google::protobuf::Arena* arena, Value2Int32Request&& from) noexcept
      : Value2Int32Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kOp1FieldNumber = 3,
    kOp2FieldNumber = 4,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string action_id = 2;
  void clear_action_id() ;
  const std::string& action_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_id(Arg_&& arg, Args_... args);
  std::string* mutable_action_id();
  PROTOBUF_NODISCARD std::string* release_action_id();
  void set_allocated_action_id(std::string* value);

  private:
  const std::string& _internal_action_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_id(
      const std::string& value);
  std::string* _internal_mutable_action_id();

  public:
  // int32 op_1 = 3;
  void clear_op_1() ;
  ::int32_t op_1() const;
  void set_op_1(::int32_t value);

  private:
  ::int32_t _internal_op_1() const;
  void _internal_set_op_1(::int32_t value);

  public:
  // int32 op_2 = 4;
  void clear_op_2() ;
  ::int32_t op_2() const;
  void set_op_2(::int32_t value);

  private:
  ::int32_t _internal_op_2() const;
  void _internal_set_op_2(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sensor.Value2Int32Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Value2Int32Request& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr action_id_;
    ::int32_t op_1_;
    ::int32_t op_2_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class Value2DoubleRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor.Value2DoubleRequest) */ {
 public:
  inline Value2DoubleRequest() : Value2DoubleRequest(nullptr) {}
  ~Value2DoubleRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Value2DoubleRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Value2DoubleRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Value2DoubleRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline Value2DoubleRequest(const Value2DoubleRequest& from) : Value2DoubleRequest(nullptr, from) {}
  inline Value2DoubleRequest(Value2DoubleRequest&& from) noexcept
      : Value2DoubleRequest(nullptr, std::move(from)) {}
  inline Value2DoubleRequest& operator=(const Value2DoubleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value2DoubleRequest& operator=(Value2DoubleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value2DoubleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Value2DoubleRequest* internal_default_instance() {
    return reinterpret_cast<const Value2DoubleRequest*>(
        &_Value2DoubleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Value2DoubleRequest& a, Value2DoubleRequest& b) { a.Swap(&b); }
  inline void Swap(Value2DoubleRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value2DoubleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value2DoubleRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Value2DoubleRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Value2DoubleRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Value2DoubleRequest& from) { Value2DoubleRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Value2DoubleRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor.Value2DoubleRequest"; }

 protected:
  explicit Value2DoubleRequest(::google::protobuf::Arena* arena);
  Value2DoubleRequest(::google::protobuf::Arena* arena, const Value2DoubleRequest& from);
  Value2DoubleRequest(::google::protobuf::Arena* arena, Value2DoubleRequest&& from) noexcept
      : Value2DoubleRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kOp1FieldNumber = 3,
    kOp2FieldNumber = 4,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string action_id = 2;
  void clear_action_id() ;
  const std::string& action_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_id(Arg_&& arg, Args_... args);
  std::string* mutable_action_id();
  PROTOBUF_NODISCARD std::string* release_action_id();
  void set_allocated_action_id(std::string* value);

  private:
  const std::string& _internal_action_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_id(
      const std::string& value);
  std::string* _internal_mutable_action_id();

  public:
  // double op_1 = 3;
  void clear_op_1() ;
  double op_1() const;
  void set_op_1(double value);

  private:
  double _internal_op_1() const;
  void _internal_set_op_1(double value);

  public:
  // double op_2 = 4;
  void clear_op_2() ;
  double op_2() const;
  void set_op_2(double value);

  private:
  double _internal_op_2() const;
  void _internal_set_op_2(double value);

  public:
  // @@protoc_insertion_point(class_scope:sensor.Value2DoubleRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Value2DoubleRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr action_id_;
    double op_1_;
    double op_2_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class GestureRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor.GestureRequest) */ {
 public:
  inline GestureRequest() : GestureRequest(nullptr) {}
  ~GestureRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GestureRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GestureRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GestureRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GestureRequest(const GestureRequest& from) : GestureRequest(nullptr, from) {}
  inline GestureRequest(GestureRequest&& from) noexcept
      : GestureRequest(nullptr, std::move(from)) {}
  inline GestureRequest& operator=(const GestureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GestureRequest& operator=(GestureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GestureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GestureRequest* internal_default_instance() {
    return reinterpret_cast<const GestureRequest*>(
        &_GestureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GestureRequest& a, GestureRequest& b) { a.Swap(&b); }
  inline void Swap(GestureRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GestureRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GestureRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GestureRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GestureRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GestureRequest& from) { GestureRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GestureRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor.GestureRequest"; }

 protected:
  explicit GestureRequest(::google::protobuf::Arena* arena);
  GestureRequest(::google::protobuf::Arena* arena, const GestureRequest& from);
  GestureRequest(::google::protobuf::Arena* arena, GestureRequest&& from) noexcept
      : GestureRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kOp1FieldNumber = 3,
    kOp2FieldNumber = 4,
  };
  // string device_id = 1;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string action_id = 2;
  void clear_action_id() ;
  const std::string& action_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_id(Arg_&& arg, Args_... args);
  std::string* mutable_action_id();
  PROTOBUF_NODISCARD std::string* release_action_id();
  void set_allocated_action_id(std::string* value);

  private:
  const std::string& _internal_action_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_id(
      const std::string& value);
  std::string* _internal_mutable_action_id();

  public:
  // int32 op_1 = 3;
  void clear_op_1() ;
  ::int32_t op_1() const;
  void set_op_1(::int32_t value);

  private:
  ::int32_t _internal_op_1() const;
  void _internal_set_op_1(::int32_t value);

  public:
  // int32 op_2 = 4;
  void clear_op_2() ;
  ::int32_t op_2() const;
  void set_op_2(::int32_t value);

  private:
  ::int32_t _internal_op_2() const;
  void _internal_set_op_2(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sensor.GestureRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GestureRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr action_id_;
    ::int32_t op_1_;
    ::int32_t op_2_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GestureRequest

// string device_id = 1;
inline void GestureRequest::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& GestureRequest::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.GestureRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GestureRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.GestureRequest.device_id)
}
inline std::string* GestureRequest::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:sensor.GestureRequest.device_id)
  return _s;
}
inline const std::string& GestureRequest::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void GestureRequest::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* GestureRequest::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* GestureRequest::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.GestureRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void GestureRequest::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.GestureRequest.device_id)
}

// string action_id = 2;
inline void GestureRequest::clear_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.ClearToEmpty();
}
inline const std::string& GestureRequest::action_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.GestureRequest.action_id)
  return _internal_action_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GestureRequest::set_action_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.GestureRequest.action_id)
}
inline std::string* GestureRequest::mutable_action_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_id();
  // @@protoc_insertion_point(field_mutable:sensor.GestureRequest.action_id)
  return _s;
}
inline const std::string& GestureRequest::_internal_action_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_id_.Get();
}
inline void GestureRequest::_internal_set_action_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(value, GetArena());
}
inline std::string* GestureRequest::_internal_mutable_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_id_.Mutable( GetArena());
}
inline std::string* GestureRequest::release_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.GestureRequest.action_id)
  return _impl_.action_id_.Release();
}
inline void GestureRequest::set_allocated_action_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_id_.IsDefault()) {
    _impl_.action_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.GestureRequest.action_id)
}

// int32 op_1 = 3;
inline void GestureRequest::clear_op_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = 0;
}
inline ::int32_t GestureRequest::op_1() const {
  // @@protoc_insertion_point(field_get:sensor.GestureRequest.op_1)
  return _internal_op_1();
}
inline void GestureRequest::set_op_1(::int32_t value) {
  _internal_set_op_1(value);
  // @@protoc_insertion_point(field_set:sensor.GestureRequest.op_1)
}
inline ::int32_t GestureRequest::_internal_op_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_1_;
}
inline void GestureRequest::_internal_set_op_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = value;
}

// int32 op_2 = 4;
inline void GestureRequest::clear_op_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = 0;
}
inline ::int32_t GestureRequest::op_2() const {
  // @@protoc_insertion_point(field_get:sensor.GestureRequest.op_2)
  return _internal_op_2();
}
inline void GestureRequest::set_op_2(::int32_t value) {
  _internal_set_op_2(value);
  // @@protoc_insertion_point(field_set:sensor.GestureRequest.op_2)
}
inline ::int32_t GestureRequest::_internal_op_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_2_;
}
inline void GestureRequest::_internal_set_op_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = value;
}

// -------------------------------------------------------------------

// Value2DoubleRequest

// string device_id = 1;
inline void Value2DoubleRequest::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& Value2DoubleRequest::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.Value2DoubleRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value2DoubleRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.Value2DoubleRequest.device_id)
}
inline std::string* Value2DoubleRequest::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:sensor.Value2DoubleRequest.device_id)
  return _s;
}
inline const std::string& Value2DoubleRequest::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void Value2DoubleRequest::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* Value2DoubleRequest::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* Value2DoubleRequest::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.Value2DoubleRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void Value2DoubleRequest::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.Value2DoubleRequest.device_id)
}

// string action_id = 2;
inline void Value2DoubleRequest::clear_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.ClearToEmpty();
}
inline const std::string& Value2DoubleRequest::action_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.Value2DoubleRequest.action_id)
  return _internal_action_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value2DoubleRequest::set_action_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.Value2DoubleRequest.action_id)
}
inline std::string* Value2DoubleRequest::mutable_action_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_id();
  // @@protoc_insertion_point(field_mutable:sensor.Value2DoubleRequest.action_id)
  return _s;
}
inline const std::string& Value2DoubleRequest::_internal_action_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_id_.Get();
}
inline void Value2DoubleRequest::_internal_set_action_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(value, GetArena());
}
inline std::string* Value2DoubleRequest::_internal_mutable_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_id_.Mutable( GetArena());
}
inline std::string* Value2DoubleRequest::release_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.Value2DoubleRequest.action_id)
  return _impl_.action_id_.Release();
}
inline void Value2DoubleRequest::set_allocated_action_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_id_.IsDefault()) {
    _impl_.action_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.Value2DoubleRequest.action_id)
}

// double op_1 = 3;
inline void Value2DoubleRequest::clear_op_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = 0;
}
inline double Value2DoubleRequest::op_1() const {
  // @@protoc_insertion_point(field_get:sensor.Value2DoubleRequest.op_1)
  return _internal_op_1();
}
inline void Value2DoubleRequest::set_op_1(double value) {
  _internal_set_op_1(value);
  // @@protoc_insertion_point(field_set:sensor.Value2DoubleRequest.op_1)
}
inline double Value2DoubleRequest::_internal_op_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_1_;
}
inline void Value2DoubleRequest::_internal_set_op_1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = value;
}

// double op_2 = 4;
inline void Value2DoubleRequest::clear_op_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = 0;
}
inline double Value2DoubleRequest::op_2() const {
  // @@protoc_insertion_point(field_get:sensor.Value2DoubleRequest.op_2)
  return _internal_op_2();
}
inline void Value2DoubleRequest::set_op_2(double value) {
  _internal_set_op_2(value);
  // @@protoc_insertion_point(field_set:sensor.Value2DoubleRequest.op_2)
}
inline double Value2DoubleRequest::_internal_op_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_2_;
}
inline void Value2DoubleRequest::_internal_set_op_2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = value;
}

// -------------------------------------------------------------------

// Value2Int32Request

// string device_id = 1;
inline void Value2Int32Request::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& Value2Int32Request::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.Value2Int32Request.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value2Int32Request::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.Value2Int32Request.device_id)
}
inline std::string* Value2Int32Request::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:sensor.Value2Int32Request.device_id)
  return _s;
}
inline const std::string& Value2Int32Request::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void Value2Int32Request::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* Value2Int32Request::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* Value2Int32Request::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.Value2Int32Request.device_id)
  return _impl_.device_id_.Release();
}
inline void Value2Int32Request::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.Value2Int32Request.device_id)
}

// string action_id = 2;
inline void Value2Int32Request::clear_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.ClearToEmpty();
}
inline const std::string& Value2Int32Request::action_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.Value2Int32Request.action_id)
  return _internal_action_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value2Int32Request::set_action_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.Value2Int32Request.action_id)
}
inline std::string* Value2Int32Request::mutable_action_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_id();
  // @@protoc_insertion_point(field_mutable:sensor.Value2Int32Request.action_id)
  return _s;
}
inline const std::string& Value2Int32Request::_internal_action_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_id_.Get();
}
inline void Value2Int32Request::_internal_set_action_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(value, GetArena());
}
inline std::string* Value2Int32Request::_internal_mutable_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_id_.Mutable( GetArena());
}
inline std::string* Value2Int32Request::release_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.Value2Int32Request.action_id)
  return _impl_.action_id_.Release();
}
inline void Value2Int32Request::set_allocated_action_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_id_.IsDefault()) {
    _impl_.action_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.Value2Int32Request.action_id)
}

// int32 op_1 = 3;
inline void Value2Int32Request::clear_op_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = 0;
}
inline ::int32_t Value2Int32Request::op_1() const {
  // @@protoc_insertion_point(field_get:sensor.Value2Int32Request.op_1)
  return _internal_op_1();
}
inline void Value2Int32Request::set_op_1(::int32_t value) {
  _internal_set_op_1(value);
  // @@protoc_insertion_point(field_set:sensor.Value2Int32Request.op_1)
}
inline ::int32_t Value2Int32Request::_internal_op_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_1_;
}
inline void Value2Int32Request::_internal_set_op_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = value;
}

// int32 op_2 = 4;
inline void Value2Int32Request::clear_op_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = 0;
}
inline ::int32_t Value2Int32Request::op_2() const {
  // @@protoc_insertion_point(field_get:sensor.Value2Int32Request.op_2)
  return _internal_op_2();
}
inline void Value2Int32Request::set_op_2(::int32_t value) {
  _internal_set_op_2(value);
  // @@protoc_insertion_point(field_set:sensor.Value2Int32Request.op_2)
}
inline ::int32_t Value2Int32Request::_internal_op_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_2_;
}
inline void Value2Int32Request::_internal_set_op_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = value;
}

// -------------------------------------------------------------------

// Value4Int32Request

// string device_id = 1;
inline void Value4Int32Request::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& Value4Int32Request::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.Value4Int32Request.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value4Int32Request::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.Value4Int32Request.device_id)
}
inline std::string* Value4Int32Request::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:sensor.Value4Int32Request.device_id)
  return _s;
}
inline const std::string& Value4Int32Request::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void Value4Int32Request::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* Value4Int32Request::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* Value4Int32Request::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.Value4Int32Request.device_id)
  return _impl_.device_id_.Release();
}
inline void Value4Int32Request::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.Value4Int32Request.device_id)
}

// string action_id = 2;
inline void Value4Int32Request::clear_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.ClearToEmpty();
}
inline const std::string& Value4Int32Request::action_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor.Value4Int32Request.action_id)
  return _internal_action_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value4Int32Request::set_action_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor.Value4Int32Request.action_id)
}
inline std::string* Value4Int32Request::mutable_action_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_id();
  // @@protoc_insertion_point(field_mutable:sensor.Value4Int32Request.action_id)
  return _s;
}
inline const std::string& Value4Int32Request::_internal_action_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_id_.Get();
}
inline void Value4Int32Request::_internal_set_action_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(value, GetArena());
}
inline std::string* Value4Int32Request::_internal_mutable_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_id_.Mutable( GetArena());
}
inline std::string* Value4Int32Request::release_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor.Value4Int32Request.action_id)
  return _impl_.action_id_.Release();
}
inline void Value4Int32Request::set_allocated_action_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_id_.IsDefault()) {
    _impl_.action_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.Value4Int32Request.action_id)
}

// int32 op_1 = 3;
inline void Value4Int32Request::clear_op_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = 0;
}
inline ::int32_t Value4Int32Request::op_1() const {
  // @@protoc_insertion_point(field_get:sensor.Value4Int32Request.op_1)
  return _internal_op_1();
}
inline void Value4Int32Request::set_op_1(::int32_t value) {
  _internal_set_op_1(value);
  // @@protoc_insertion_point(field_set:sensor.Value4Int32Request.op_1)
}
inline ::int32_t Value4Int32Request::_internal_op_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_1_;
}
inline void Value4Int32Request::_internal_set_op_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_1_ = value;
}

// int32 op_2 = 4;
inline void Value4Int32Request::clear_op_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = 0;
}
inline ::int32_t Value4Int32Request::op_2() const {
  // @@protoc_insertion_point(field_get:sensor.Value4Int32Request.op_2)
  return _internal_op_2();
}
inline void Value4Int32Request::set_op_2(::int32_t value) {
  _internal_set_op_2(value);
  // @@protoc_insertion_point(field_set:sensor.Value4Int32Request.op_2)
}
inline ::int32_t Value4Int32Request::_internal_op_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_2_;
}
inline void Value4Int32Request::_internal_set_op_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_2_ = value;
}

// int32 op_3 = 5;
inline void Value4Int32Request::clear_op_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_3_ = 0;
}
inline ::int32_t Value4Int32Request::op_3() const {
  // @@protoc_insertion_point(field_get:sensor.Value4Int32Request.op_3)
  return _internal_op_3();
}
inline void Value4Int32Request::set_op_3(::int32_t value) {
  _internal_set_op_3(value);
  // @@protoc_insertion_point(field_set:sensor.Value4Int32Request.op_3)
}
inline ::int32_t Value4Int32Request::_internal_op_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_3_;
}
inline void Value4Int32Request::_internal_set_op_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_3_ = value;
}

// int32 op_4 = 6;
inline void Value4Int32Request::clear_op_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_4_ = 0;
}
inline ::int32_t Value4Int32Request::op_4() const {
  // @@protoc_insertion_point(field_get:sensor.Value4Int32Request.op_4)
  return _internal_op_4();
}
inline void Value4Int32Request::set_op_4(::int32_t value) {
  _internal_set_op_4(value);
  // @@protoc_insertion_point(field_set:sensor.Value4Int32Request.op_4)
}
inline ::int32_t Value4Int32Request::_internal_op_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_4_;
}
inline void Value4Int32Request::_internal_set_op_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_4_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensor_2eproto_2epb_2eh

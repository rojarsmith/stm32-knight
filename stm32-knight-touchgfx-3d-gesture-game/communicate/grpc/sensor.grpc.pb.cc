// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensor.proto

#include "sensor.pb.h"
#include "sensor.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sensor {

static const char* SensorMX_method_names[] = {
  "/sensor.SensorMX/SetGesture",
  "/sensor.SensorMX/SetValue2Double",
  "/sensor.SensorMX/SetValue2Int32",
  "/sensor.SensorMX/SetValue4Int32",
};

std::unique_ptr< SensorMX::Stub> SensorMX::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SensorMX::Stub> stub(new SensorMX::Stub(channel, options));
  return stub;
}

SensorMX::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetGesture_(SensorMX_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetValue2Double_(SensorMX_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetValue2Int32_(SensorMX_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetValue4Int32_(SensorMX_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SensorMX::Stub::SetGesture(::grpc::ClientContext* context, const ::sensor::GestureRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensor::GestureRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGesture_, context, request, response);
}

void SensorMX::Stub::async::SetGesture(::grpc::ClientContext* context, const ::sensor::GestureRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensor::GestureRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGesture_, context, request, response, std::move(f));
}

void SensorMX::Stub::async::SetGesture(::grpc::ClientContext* context, const ::sensor::GestureRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGesture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::PrepareAsyncSetGestureRaw(::grpc::ClientContext* context, const ::sensor::GestureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sensor::GestureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGesture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::AsyncSetGestureRaw(::grpc::ClientContext* context, const ::sensor::GestureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGestureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorMX::Stub::SetValue2Double(::grpc::ClientContext* context, const ::sensor::Value2DoubleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensor::Value2DoubleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetValue2Double_, context, request, response);
}

void SensorMX::Stub::async::SetValue2Double(::grpc::ClientContext* context, const ::sensor::Value2DoubleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensor::Value2DoubleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetValue2Double_, context, request, response, std::move(f));
}

void SensorMX::Stub::async::SetValue2Double(::grpc::ClientContext* context, const ::sensor::Value2DoubleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetValue2Double_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::PrepareAsyncSetValue2DoubleRaw(::grpc::ClientContext* context, const ::sensor::Value2DoubleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sensor::Value2DoubleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetValue2Double_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::AsyncSetValue2DoubleRaw(::grpc::ClientContext* context, const ::sensor::Value2DoubleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetValue2DoubleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorMX::Stub::SetValue2Int32(::grpc::ClientContext* context, const ::sensor::Value2Int32Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensor::Value2Int32Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetValue2Int32_, context, request, response);
}

void SensorMX::Stub::async::SetValue2Int32(::grpc::ClientContext* context, const ::sensor::Value2Int32Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensor::Value2Int32Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetValue2Int32_, context, request, response, std::move(f));
}

void SensorMX::Stub::async::SetValue2Int32(::grpc::ClientContext* context, const ::sensor::Value2Int32Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetValue2Int32_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::PrepareAsyncSetValue2Int32Raw(::grpc::ClientContext* context, const ::sensor::Value2Int32Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sensor::Value2Int32Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetValue2Int32_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::AsyncSetValue2Int32Raw(::grpc::ClientContext* context, const ::sensor::Value2Int32Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetValue2Int32Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorMX::Stub::SetValue4Int32(::grpc::ClientContext* context, const ::sensor::Value4Int32Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensor::Value4Int32Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetValue4Int32_, context, request, response);
}

void SensorMX::Stub::async::SetValue4Int32(::grpc::ClientContext* context, const ::sensor::Value4Int32Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensor::Value4Int32Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetValue4Int32_, context, request, response, std::move(f));
}

void SensorMX::Stub::async::SetValue4Int32(::grpc::ClientContext* context, const ::sensor::Value4Int32Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetValue4Int32_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::PrepareAsyncSetValue4Int32Raw(::grpc::ClientContext* context, const ::sensor::Value4Int32Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sensor::Value4Int32Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetValue4Int32_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* SensorMX::Stub::AsyncSetValue4Int32Raw(::grpc::ClientContext* context, const ::sensor::Value4Int32Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetValue4Int32Raw(context, request, cq);
  result->StartCall();
  return result;
}

SensorMX::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorMX_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorMX::Service, ::sensor::GestureRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorMX::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensor::GestureRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetGesture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorMX_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorMX::Service, ::sensor::Value2DoubleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorMX::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensor::Value2DoubleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetValue2Double(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorMX_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorMX::Service, ::sensor::Value2Int32Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorMX::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensor::Value2Int32Request* req,
             ::google::protobuf::Empty* resp) {
               return service->SetValue2Int32(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorMX_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorMX::Service, ::sensor::Value4Int32Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorMX::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensor::Value4Int32Request* req,
             ::google::protobuf::Empty* resp) {
               return service->SetValue4Int32(ctx, req, resp);
             }, this)));
}

SensorMX::Service::~Service() {
}

::grpc::Status SensorMX::Service::SetGesture(::grpc::ServerContext* context, const ::sensor::GestureRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorMX::Service::SetValue2Double(::grpc::ServerContext* context, const ::sensor::Value2DoubleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorMX::Service::SetValue2Int32(::grpc::ServerContext* context, const ::sensor::Value2Int32Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorMX::Service::SetValue4Int32(::grpc::ServerContext* context, const ::sensor::Value4Int32Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensor

